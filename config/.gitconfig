[alias]
  a = commit --amend --reuse-message=HEAD # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD
  aliases = config --get-regexp alias # List aliases
  br = branch
  branches = branch -a
  c = clone --recursive # Clone a repository including all submodules
  ca = !git add -A && git commit -av # Commit all changes
  cm = !git add -A && git commit -av # Commit all changes
  co = checkout
  cob = checkout -b
  commit-count = shortlog -n -s --no-merges
  contributors = shortlog --summary --numbered # List contributors with number of commits
  cp = cherry-pick
  # Credit an author on the latest commit
  credit = "!f() { \
    if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
      git commit --amend --author \"$1 <$2>\" -C HEAD; \
    fi \
  }; f"
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"  
  dc = diff --cached # Show the diff between the latest commit and the current state
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state 
  di = !"d() { \
    git diff --patch-with-stat HEAD~$1; \
  }; git diff-index --quiet HEAD -- || clear; d"
  # Remove branches that have already been merged with master a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"  
  fbrcm = "!f() { git branch -a --contains $1; }; f" # Find branches containing commit
  # Find commits by commit message
  fcm = "!f() { \
    git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
  }; f"
  # Find commits by commit message
  fm = "!f() { \
    git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' \
            --decorate --date=short --grep=$1; \
  }; f"
  # Find tags containing commit
  ftcm = "!f() { git describe --always --contains $1; }; f"
  g = log --graph --pretty=custom # Show custom graph
  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit    
  lc = shortlog --summary --numbered # List contributors
  # List remote branches
  lrb = "!f() { \
    remote="${1:-origin}"; \
    git ls-remote --heads "$remote"; \
  }; f"
  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git checkout -B $branch && \
      git rebase $branch pr/$1 && \
      git checkout -B $branch && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
    fi \
  }; f"
  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  r = rebase
  reb = "!r() { git rebase -i HEAD~$1; }; r" # Interactive rebase with the given number of latest commits
  remotes = remote -v
  # Remove the tag with the specified tag name if
  # exists and tag the latest commit with that name
  retag = "!f() { \
    git tag -d "$1" &> /dev/null; \
    git tag $1; \
  }; f"
  rlc = reset --hard HEAD~1 # Remove last commit
  s = status -s` # View the current working tree status using the short format
  save = !"git add -A; git commit -m 'SAVEPOINT';"
  tags = tag -l
  ulc = reset --soft HEAD~1 # Undo last commit   
  undo = reset HEAD~1 --mixed
  undopush = push -f origin HEAD^:master # Undo a `git push`
   up = pull upstream master
  wip = !"git add -u; git commit -m 'WIP';"
  wipe = !"git add -A; git commit -qm 'WIPE SAVEPOINT'; git reset HEAD~1 --hard;"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  abbrev = 12
  autocrlf = input
  editor = vim

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[commit]

  # https://help.github.com/articles/signing-commits-using-gpg/
  gpgsign = true

[diff "bin"]

  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]

  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[diff]
  tool = vimdiff
  # Detect copies as well as renames
  renames = copies

[difftool]
  prompt = false

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)


[user]

    # Don't guess the user's identity
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

    useConfigOnly = true
  email = byndcivilization@gmail.com
  name = Chris Perry

[include]

    # Load local configs
    # https://git-scm.com/docs/git-config#_includes
    #
    # Note: The following needs to remain at the end of this file in
    #       order to allow any of the above configs to be overwritten
    #       by the local ones

    path = ~/.gitconfig.local

[alias]



